module FetchBack
  ## A cipher class to handle DES encryption and decryption
  ## used for affiliate links.
  class Cipher
    def initialize()
      @secret = '466d4537466b5b67'
      @iv = '66761db3c2a42d38'
      @cipher = OpenSSL::Cipher.new('DES-ECB')
    end

    def hex_to_bin(value)
      value.scan(/../).map{|x|x.hex}.pack('c*')
    end

    def bin_to_hex(value)
      value.unpack('H*')
    end

    def decrypt(data)
      setup_cipher(:decrypt)
      @cipher.update(hex_to_bin(data)) + @cipher.final
    end

    def encrypt(data)
      setup_cipher(:encrypt)
      e = @cipher.update(data) + @cipher.final
      bin_to_hex(e)
    end

    def setup_cipher(method)
      @cipher.send(method)
      @cipher.key = hex_to_bin(@secret)
      @cipher.iv = hex_to_bin(@iv)
    end
  end

  def FetchBack.encrypt(data)
    FetchBack::Cipher.new.encrypt(data)[0]
  end

  def FetchBack.decrypt(data)
    FetchBack::Cipher.new.decrypt(data).to_s
  end

  def FetchBack.encode_affiliate_param(site_id, affiliate_id)
    sep=':'
    FetchBack.encrypt(random_string(3) + sep + site_id.to_s + sep + affiliate_id.to_s)
  end

  #Returns an array (siteId, affiliateId)
  def FetchBack.decode_affiliate_param(param)
    sep=':'
    FetchBack.decrypt(param).split(sep).last(2)
  end

  def FetchBack.random_string(size)
    alphanumeric = [('0'..'9'),('a'..'z'),('A'..'Z')].map{|i| i.to_a}.flatten
    (0...size).map{alphanumeric[rand(alphanumeric.length)]}.join
  end
end

#Run some tests if we're just executing the file.
if __FILE__ == $0
  #Encrypt/decrypt test. These strings should be printed in reverse.
  puts FetchBack.decrypt('375c4dd0527946b906bfef543950f027')
  puts FetchBack.encrypt('Hello World')
  puts

  #Affiliate Test
  afl = FetchBack.encode_affiliate_param(11, 'PPJ1')
  puts afl
  puts FetchBack.decode_affiliate_param(afl)
  puts
end